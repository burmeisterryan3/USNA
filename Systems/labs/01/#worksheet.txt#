
----------------------------------------------------------------------------
Name:  Ryan Burmeister
Alpha: 160786

Partner: Charles Ren (part 4)
----------------------------------------------------------------------------
Instructions:

  Replace the X's above with your name and alpha, and your partners
  name for part 4. Below, fill out this worksheet with the appropriate
  answers following the questions.

  Feel free to add extra whitespace as needed, but please leave the
  general questions and worksheets intact. 

  
  This worksheet will be submitted electronically with your
  submission. Instructions for submission are found on the lab page.

----------------------------------------------------------------------------
Part 1: The Man Pages


   1. For the =ls= command, what option prints information out in long
      form, like =-l=, but does not print any file ownership
      information? In the worksheet, provide a copy of the output
      using =ls= with this option run from the *top level* of the lab
      directory.

      =-g= does not print any file ownership any ownership
      information.

      m160786@mich302csd20u:~/ic221/labs/01$ ls -g
      total 36
      drwx--x--x 2 mids 4096 Jan 10 09:24 part1/
      drwx--x--x 2 mids 4096 Jan 10 09:24 part2/
      drwx--x--x 2 mids 4096 Jan 10 09:24 part3/
      drwx--x--x 2 mids 4096 Jan 10 09:24 part4/
      drwx--x--x 2 mids 4096 Jan 10 09:24 part5/
      -rw------- 1 mids 6098 Jan 10 09:33 #worksheet.txt#
      -rw-r--r-- 1 mids 6089 Jan 10 09:24 worksheet.txt


   2. Change into the =part1= directory and type =ls=. You will see a
      list of files =a b c d e f g=. 
      
      a. Note that =ls= lists the files in alphabetic order. What =ls=
         option will list the files in /reverse/ alphabetic order? Provide
         a copy of your output of your =ls= with the addition of =-l=
         in your worksheet.

	 =-r= will list the files in reverse alphabetic order.

	 m160786@mich302csd20u:~/ic221/labs/01/part1$ ls -r
	 g  f  e  d  c  b  a


      b. What =ls= options will sort the files by /size/ from smallest
         to largest? Provide a copy of your output of your =ls= with
         the addition of =-l= in your worksheet.

	 =-S= will sort the files from smallest to largest.

	 m160786@mich302csd20u:~/ic221/labs/01/part1$ ls -S
	 d  e  f  b  c  g  a


      c. What =ls= option will sort the files in /reverse size/ order
         from largest to smallest. Provide a copy of your output of
         your =ls= with the addition of =-l= in your worksheet.

	 =-rS= or =-Sr= will sort the files in reverse size order from
	 largest to smallest.

	 m160786@mich302csd20u:~/ic221/labs/01/part1$ ls -rS
	 a  g  c  b  f  e  d

	 ls -l
	 total 108
	 -rw-r--r-- 1 m160786 mids  6091 Jan 10 09:24 a
	 -rw-r--r-- 1 m160786 mids 12322 Jan 10 09:24 b
	 -rw-r--r-- 1 m160786 mids 12214 Jan 10 09:24 c
	 -rw-r--r-- 1 m160786 mids 22156 Jan 10 09:24 d
	 -rw-r--r-- 1 m160786 mids 16989 Jan 10 09:24 e
	 -rw-r--r-- 1 m160786 mids 13946 Jan 10 09:24 f
	 -rw-r--r-- 1 m160786 mids  9894 Jan 10 09:24 g


   3. Remove the =g= file using the =rm= command. Notice that the
      shell asked you to confirm removing the item.  Look at the
      manual for =rm=, what option must have been invoked when you
      issued that command? What option can you use to avoid having to
      confirm the removal of an item?

	=-i= was the option invoked.  To avoid confirmation, the =-I= command
	can be used.

   4. (*Challenge*) Read the manual page for the =touch= command. One
      of the uses for =touch= is to update the last modified timestamp
      of a file (you can view that last modified using =ls -l=). Use
      the =touch= command to create a file =y2k= whose last
      modification time was Dec. 31 1999 at 23:59.59. Include the
      command you used on your worksheet and a copy of your =ls -l=
      output of the =y2k= file.

        mich302csd10u[158][~/ic221/labs/01/part1]$ touch -t 199912312359.59 y2k
	mich302csd10u[159][~/ic221/labs/01/part1]$ ls -l
	total 96
	-rw-r--r-- 1 m160786 mids  6091 Jan 10 09:24 a
	-rw-r--r-- 1 m160786 mids 12322 Jan 10 09:24 b
	-rw-r--r-- 1 m160786 mids 12214 Jan 10 09:24 c
	-rw-r--r-- 1 m160786 mids 22156 Jan 10 09:24 d
	-rw-r--r-- 1 m160786 mids 16989 Jan 10 09:24 e
	-rw-r--r-- 1 m160786 mids 13946 Jan 10 09:24 f
	-rw------- 1 m160786 mids     0 Dec 31  1999 y2k

----------------------------------------------------------------------------
Part 2: cat, less, and more


   1. Use =cat= to place a "Beat Army!" at the start of Hemmingway's a
      very short story and "Go Navy!" at the end. Include the command
      you used on your worksheet.

	cat GoNavy.txt hemmingway.txt

   2. Why is =less= =more=?

	=less= allows the user to navigate forwards and backwards within file.
	=more= only allows the user to go forwards and exits at the end.
	
   3. Use =less= to open =dickens.txt=:

      a. Search for the first instance of "Fagin", what is the line of
         that text?

	line 2629

      b. Find the *second to last* instance of "Fagin". Describe how
         you did that and the sentence it appears in.
   
	"As far from home, died the chief remaining members of his friend
	Fagin's gang.

	To find this, I went to the end of the file with =>=, and then used
	searched backwards in the file using =?Fagin=.  Because this gave me
	the last Fagin in the file, I typed =n= to find the next Fagin by
	searching backwards.

      c. Go to line 1845, what is the name of that chapter? 

	Line 1845 occurs in Chapter V:  Oliver Mingles with New Associates.
	Going to a funeral for the first time, he forms and unfavorable notion
	of his master's business

----------------------------------------------------------------------------
Part 3: Viewing Files Conditionally


   1. Read the man pages for =head= and =less=, produce a command line
      to print the first kilobyte of the database file. Note, a
      kilobyte is 2^10 or 1024 bytes. Include the command line in your worksheet.

	head -1024 less sample-db.csv
	OR
	less sample-db.csv head -1024

   2. Use =less= or =grep= to find the line number of
      "Klonowski". Produce a =sed= command to just print the line with
      "Klonowski" and the following 5 lines. Include the command line
      in your worksheet.

	grep -n Klonowski sample-db.csv
	(line 56)

	sed -n 56+5p sample-db.csv

   3. How many people's first name is "Pamella"? Use =grep= to find
      that out. 

	2

	grep -c Pamella sample-db.csv

   4. Read the =man= page for grep. Print out the all the lines from
      people who *do not* have an address in NJ. Include the command
      line in your worksheet.

	449

	grep -cv NJ sample-db.csv

----------------------------------------------------------------------------
Part 4: Pipelines and Counting

   1. Create a pipeline to count the number of unique states
      represented in the database file. Include the pipeline in your
      worksheet.

	number of unique states: 47
	cut -d "," -f 7,8 sample-db.csv | grep -o [A-Z][A-Z] | sort | uniq | wc -l

   2. How many first names in the file repeat? How many last names?
      Include the pipelines used to determine this.
	
	repeated first names: 16
	cut -d "," -f 1 sample-db.csv | sort -d | uniq -d | wc -l

	repeated last names : 0
	cut -d "," -f 2 sample-db.csv | sort -d | uniq -d | wc -l	

   3. Write a pipeline to first print to the terminal all the unique
      telephone area codes? Add to your pipeline how to sort those
      numerical?  (Hint: read the man page for =sort=).

	number of unique telephone area codes: 161
	cut -d "," -f 10 sample-db.csv | cut -d "-" -f 1 | grep -o [0-9][0-9][0-9] | sort -u

----------------------------------------------------------------------------
Part 5: Permissions and Ownership

   1. Convert the following permission states into an octet:

      a. User: read and write; Group: read; Global: read

	chmod 644 =filename=
	
      b. User: read and execute; Group execute; Global: read
   
	chmod 514 =filename=

   2. Make the =runme= program executable and execute it. What is the
      output?

	=You ran ./runme, but your username is m160786=

   3. Work with a partner, copy the =runme= program to your /home/
      directory. Change the name of it to =runme-username= where
      =username= is replaced by /your/ username (e.g., m16723). 

      a. Set the program to the permission setting such that anyone
         can execute it. Ask your partner to try and execute it using
         the following command: =~username/runme-username= where
         =username= is replaced by your username. What is the output?

	=You ran /home/mids/m165364/runme-m165364, but your username is m160786=

      b. Set the program to have the permission where only members of
         the same group can execute it. Run =ls -l= to verify you've
         done this properly and include that output in your
         worksheet. Can you partner run your program now? Why so or
         why not?

	Yes, we are able to run each other's program because we are within the same
	group, and the permissions are set to allow other group members to 
	execute the program.

      c. Set the program such that only you can execute it, but
         anyone can read it. Run =ls -l= to verify that you've done
         this properly and include that output in your worksheet. Can
         your partner still run the program? But, could your partner
         /copy/ the program to his/her home directory and then run
         it? Briefly describe that process in your worksheet.

	My partner can no longer run the program.
	
	Once the file was copied into my partner's home directory the
	file could be run on their machine as they were the user and
	the permissions allowed the user to execute the program.  We
	had to change directories into the other's home directory, copy
	the file into our own home directory, change back into our own
	home directory before executing the program.
